package cse.ucdenver.csci5593.parser;

import cse.ucdenver.csci5593.instruction.Instruction;

import java.io.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

/**
 * Created by willi on 3/14/2016.
 */
public class Parser {

    private InstructionSet instSet;

    // Hold the map between memory address and variable name
    private HashMap<String, Integer> map;
    // Hold the used memory addresses so we don't accidentally
    // use the same slot twice. Index 0 is reserved for constants.
    // 1-8 is reserved for general purpose registers
    private int next;

    public Parser() {
        this.instSet = new X86InstructionSet();
        this.map = new HashMap<>();
        this.next = this.instSet.maxRegisterIndex();
    }

    /**
     * Parses a given file and returns a list of instructions
     * that can be used by a Core object to run
     *
     * @param filename
     * @return List of instructions generated by the file
     *         or null if the file isn't properly formatted
     * @see cse.ucdenver.csci5593.core.Core
     */
    public List<Instruction> parseFile(String filename) {
        // Result
        List<Instruction> result = new ArrayList<>();

        // Loop through the file
        try (BufferedReader reader = new BufferedReader(new FileReader(filename))) {
            String line;
            while ((line = reader.readLine()) != null) {

                // Split the line at the spaces
                String[] splitLine = this.instSet.stripComments(line).split(" ");

                // Create new instruction
                Instruction inst = this.instSet.generateInstruction(splitLine);

                // Take care of operands
                for (int i = 1; i < splitLine.length; ++i) {
                    this.addOperand(splitLine[i], inst);
                }

                // Add instruction to set
                result.add(inst);
            }
        } catch (FileNotFoundException e) {
            System.err.print("Parse file not found: " + filename);
        } catch (IOException e) {
            System.err.print("Error reading parse file: " + e);
        }

        return null;
    }

    private void addOperand(String str, Instruction inst) {
        int addr;

        // Check if it's a register
        if ((addr = this.instSet.isRegister(str)) != 0) {
            inst.addOperand(addr);
            return;
        }

        // Check whether it's a constant
        else if (this.instSet.isConstant(str)) {
            inst.addOperand(0);
            return;
        }

        // Check whether it's a memory location
        else {
            if (map.containsKey(str)) {
                inst.addOperand(map.get(str));
            } else {
                inst.addOperand(next++);
            }
        }
    }
}
